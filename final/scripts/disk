#!/usr/bin/env bash
set -ex -o pipefail -o nounset

###############################################################################
# Command wrappers.
###############################################################################

_parted() {
   parted --script --align optimal -- "$@"
}

_mkpart() {
   local device="$1"
   local part="$2"
   local start="$3"
   local end="$4"
   local name="$5"
   local flag="$6"

   [ "$device" ] && [ "$part" ] && [ "$start" ] && [ "$end" ]

   _parted "$device" mkpart primary "$start" "$end"
   [ "$name" ] && (_parted "$device" name "$part" "$name") || true
   [ "$flag" ] && (_parted "$device" set "$part" "$flag" on) || true
}

_lvcreate() {
   local name="$1"
   local size="$2"

   [ "$name" ] && [ "$size" ]

   lvcreate --zero y --wipesignatures y --name "$name" --size "$size" "$LV_GROUP"
}

_format() {
   local fs_type="$1"
   local device="$2"

   [ "$fs_type" ] && [ "$device" ]

   "mkfs.$fs_type" -q "$device"
}

_mount() {
   local fs_type="$1"
   local device="$2"
   local path="$3"
   local options="$4"

   [ "$fs_type" ] && [ "$device" ] && [ "$path" ] && [ "$options" ]

   mkdir -p "$path"
   mount -t "$fs_type" -o "$options" "$device" "$path"
}

###############################################################################
# Disk preparation.
###############################################################################

make_raw_partitions() {
   _parted "$RAW_DEVICE_PATH" mklabel gpt

   local index=1
   local begin=2
   local end

   for label in "$(echo $RAW_PARTITIONS)"; do
      local name
      local size
      local flag
      local mount

      local partition="RAW_PARTITION_$label"
      for var in "$(echo ${!partition})"; do
         eval $var
      done

      [ "_$size" = '_-1' ] && end=-1 || end="$(expr $begin + $size)"

      _mkpart "$RAW_DEVICE_PATH" "$index" "$start" "$end" "$name" "$flag"

      index="$(expr $index + 1)"
      begin="$end"

      unset name
      unset size
      unset flag
      unset mount
   done
}

make_logical_partitions() {
   pvcreate -ff --yes "$(lvm_partition)"
   vgcreate "$LV_GROUP" "$(lvm_partition)"

   for label in "$(echo $LVM_PARTITIONS)"; do
      local name
      local size
      local mount

      local partition="LVM_PARTITION_$label"
      for var in "$(echo ${!partition})"; do
         eval $var
      done

      _lvcreate "$name" "$size"

      unset name
      unset size
      unset mount
   done
}

format_and_mount() {
   local fs_type="$1"
   local device="$2"
   local path="$3"

   [ "$fs_type" ] && [ "$device" ] && [ "$path" ]

   local options="$(mount_options $path)"

   [ "$options" ]

   _format "$fs_type" "$device"
   _mount "$fs_type" "$device" "$path" "$options"
}

mount_tmpfs() {
   local path="$1"

   [ "$path" ]

   local options="$(mount_tmpfs_options $path)"

   [ "$options" ]

   _mount tmpfs tmpfs "$path" "$options"
}

encrypt_phrase() {
   local label="$1"
   local passphrase="$2"

   [ "$label" ] && [ "$passphrase" ]

   local device="$(logical_volume $label)"
   local cryptsetup='cryptsetup -q'

   echo "$passphrase" | $cryptsetup luksFormat "$device"
   echo "$passphrase" | $cryptsetup luksOpen "$device" "$label"
}

make_key() {
   local label="$1"

   [ "$label" ]

   local keyfile="$(crypt_key_file $label)"

   dd if=/dev/random of="$keyfile" bs=2048 count=1 iflag=fullblock
   chmod 000 "$keyfile"

   echo "$keyfile"
}

encrypt_key() {
   local label="$1"
   local keyfile="$2"

   [ "$label" ] && [ "$keyfile" ]

   local device="$(logical_volume $label)"
   local cryptsetup="cryptsetup -q --key-file $keyfile"

   $cryptsetup luksFormat "$device"
   $cryptsetup luksOpen "$device" "$label"
}

###############################################################################
# Instructions.
###############################################################################

make_raw_partitions
make_logical_partitions

# Root Partition

encrypt_phrase root "$PASSPHRASE"
format_and_mount ext4 "$(luks_container root)" "$(mount_point root)"

# Boot Partition

format_and_mount etx4 "$(boot_partition)" "$(mount_point boot)"

# Encrypted Partitions

mkdir -p "$(crypt_key_dir)"
chmod 000 "$(crypt_key_dir)"

encrypt_key home "$(make_key home)"
encrypt_key var "$(make_key var)"

format_and_mount ext4 "$(luks_container home)" "$(mount_point home)"
format_and_mount ext4 "$(luks_container var)" "$(mount_point var)"

# TMPFS Partitions

mount_tmpfs "$(mount_point /tmp)"
mount_tmpfs "$(mount_point /var/cache)"
mount_tmpfs "$(mount_point /usr/src)"
mount_tmpfs "$(mount_point /usr/local/src)"
