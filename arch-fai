#!/usr/bin/env bash

echo checking for network connection...
if [ ! ping -c 1 www.google.com 2>&1 >/dev/null ]; then
   echo no network connection found. exiting...
   exit 1
fi

set -x -e -o pipefail -o nounset

###############################################################################
# References
###############################################################################

THIS_PATH="$0"
THIS_FILE="$(basename $THIS_PATH)"
THIS_DIRECTORY="$(dirname $THIS_PATH)"
export SCRIPT_DIRECTORY="$THIS_DIRECTORY/scripts"

###############################################################################
# Variables.
###############################################################################

SSD=''
RANDOM_SOURCE=''

BIOS=''
ARCHITECTURE="$(uname -m)"
LV_GROUP='LvGroup'
MOUNT_POINT='/mnt/archbox'
CONFIG_DIRECTORY="$THIS_DIRECTORY/configure"

RAW_DEVICE_PATH=''
PASSPHRASE=''
PASSWORD=''

###############################################################################
# Instructions.
###############################################################################

usage() {
   cat <<EOT
Usage: $THIS_FILE [ <Optional Arguments> ] [ <Overridable Arguments> ] <Required Arguments>
   -h                Display this help message and exit.

Optional Arguments:
   -s                Is the raw device a solid state drive? (default false)
   -r                Randomize raw device contents using /dev/random.
   -u                Randomize raw device contents using /dev/urandom.

Overridable Arguments:
   -b                System uses BIOS. (default EFI)
   -a <architecture> Hardware architecture. (default to result of \`uname -m\`)
   -L <device>       Logical volume group name. (default '$LV_GROUP')
   -M <mount point>  Installation mount point. (default '$MOUNT_POINT')
   -C <config dir>   Configuration file directory. (default '$CONFIG_DIRECTORY')

Required Arguments:
   -D <device>       Raw device (disk) path. Must be a block device.
EOT
}

parse_cmd_line() {
   local OPTIND
   local OPTSTR="hsruba:L:M:C:D:"
   while getopts "$OPTSTR" OPTION; do
      case "$OPTION" in
      h)
         usage
         exit 0
      ;;

      s) SSD='true' ;;
      r) RANDOM_SOURCE='random' ;;
      u) RANDOM_SOURCE='urandom' ;;

      b) BIOS='true' ;;
      a) ARCHITECTURE="$OPTARG" ;;
      L) LV_GROUP="$OPTARG" ;;
      M) MOUNT_POINT="$OPTARG" ;;
      C) CONFIG_DIRECTORY="$OPTARG" ;;

      D) RAW_DEVICE_PATH="$OPTARG" ;;

      \?)
         echo "Unrecognized argument: $OPTION."
         usage
         exit 1
      ;;
      esac
   done
}

validate_cmd_line() {
   [ "$ARCHITECTURE" ] || _require 'architecture'
   [ "$LV_GROUP" ] || _require 'logical volume group'
   [ "$MOUNT_POINT" ] || _require 'mount point'
   [ "$CONFIG_DIRECTORY" ] || _require 'configuration directory'

   [ "$RAW_DEVICE_PATH" ] || _require 'raw device path'
   [ -b "$RAW_DEVICE_PATH" ] || _error 'Raw device path is not a valid block device.'
}

export_cmd_line() {
   export SSD
   export RANDOM_SOURCE

   export BIOS
   export ARCHITECTURE
   export LV_GROUP
   export MOUNT_POINT
   export CONFIG_DIRECTORY

   export RAW_DEVICE_PATH
}

###############################################################################
# Instructions.
###############################################################################

. "$SCRIPT_DIRECTORY/functions"

parse_cmd_line "$@"
validate_cmd_line
export_cmd_line

. "$SCRIPT_DIRECTORY/variables"

SCRIPT_OPTIONS='-x -e -o pipefail -o nounset'

bash $SCRIPT_OPTIONS ./scripts/disk
bash $SCRIPT_OPTIONS ./scripts/install
bash $SCRIPT_OPTIONS ./scripts/configure
bash $SCRIPT_OPTIONS ./scripts/cleanup
