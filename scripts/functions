###############################################################################
# Utility functions.
###############################################################################

_error() {
   local message="$@"

   if [ "$message" ]; then
      echo "$message" >&2
   fi

   echo "Exiting..." >&2
   exit 1
}
export -f _error

_require() {
   local variable="$@"
   _error "A $variable must be specified."
}
export -f _require

_replace() {
   local search="$1"
   local replace="$2"
   local file="$3"

   grep -q "$search" "$file" && sed -i "s#$search#$replace#" "$file" || echo "$replace" >> "$file"
}
export -f _replace

read_file_by_symbol() {
   local file="$1"

   [ "$file" ]

   cat "$file" | sed 's/#.*$//' | sed '/^$/d' | tr '[:space:]' ' '
}
export -f read_file_by_symbol

read_file_by_line() {
   local file="$1"

   [ "$file" ]

   cat "$file" | sed 's/#.*$//' | sed '/^$/d' | tr '[:blank:]' ' '
}
export -f read_file_by_line

###############################################################################
# Path definitions.
###############################################################################

bootloader_partition() {
   if [ "$BIOS" ]; then
      echo "${RAW_DEVICE_PATH}1"
   else
      echo
   fi
}
export -f bootloader_partition

boot_partition() {
   if [ "$BIOS" ]; then
      echo "${RAW_DEVICE_PATH}2"
   else
      echo "${RAW_DEVICE_PATH}1"
   fi
}
export -f boot_partition

lvm_partition() {
   if [ "$BIOS" ]; then
      echo "${RAW_DEVICE_PATH}3"
   else
      echo "${RAW_DEVICE_PATH}2"
   fi
}
export -f lvm_partition

logical_volume() {
   local volume="$1"

   [ "$volume" ]

   echo "/dev/mapper/$LV_GROUP-$volume"
}
export -f logical_volume

logical_label() {
   local label="$1"

   [ "$label" ]

   echo "$LV_GROUP/$label"
}
export -f logical_label

luks_container() {
   local label="$1"

   [ "$label" ]

   echo "/dev/mapper/$label"
}
export -f luks_container

mount_point() {
   local label="$1"

   [ "$label" ]

   label="$(echo $label | sed "s#^/##")"

   if [ "_$label" = '_root' ]; then
      echo "$MOUNT_POINT"
   else
      echo "$MOUNT_POINT/$label"
   fi
}
export -f mount_point

crypt_key_dir() {
   echo '/etc/cryptkeys'
}
export -f crypt_key_dir

crypt_key_file() {
   local label="$1"

   [ "$label" ]

   echo "$(crypt_key_dir)/$label"
}
export -f crypt_key_file

config_file() {
   local label="$1"

   [ "$label" ]

   echo "$CONFIG_DIRECTORY/$label"
}
export -f config_file

###############################################################################
# Option generators.
###############################################################################

raw_partition_value() {
   local label="$1"
   local value="$2"

   [ "$label" ] && [ "$value" ]

   local name=
   local size=
   local flag=
   local fs_type=
   local mount=

   local partition="RAW_PARTITION_$label"
   for var in $(echo ${!partition}); do
      eval $var
   done

   echo ${!value}
}
export -f raw_partition_value

logical_volume_value() {
   local label="$1"
   local value="$2"

   [ "$label" ] && [ "$value" ]

   local name=
   local size=
   local fs_type=
   local mount=

   local partition="LOGICAL_VOLUME_$label"
   for var in $(echo ${!partition}); do
      eval $var
   done

   echo ${!value}
}
export -f logical_volume_value

tmpfs_directory_value() {
   local label="$1"
   local value="$2"

   [ "$label" ] && [ "$value" ]

   local size=
   local mount=

   local partition="TMPFS_DIRECTORY_$label"
   for var in $(echo ${!partition}); do
      eval $var
   done

   echo ${!value}
}
export -f tmpfs_directory_value

mount_options() {
   local label="$1"

   [ "$label" ]

   local options=
   if [ "_$label" = "_swap" ]; then
      options='sw'
   else
      options='defaults,noatime'
   fi
   if [ "$SSD" ]; then
      options="$options,discard"
   fi

   echo "$options"
}
export -f mount_options

mount_tmpfs_options() {
   local label="$1"

   [ "$label" ]

   local general_options='rw,nodev,noatime,async,auto,nouser'
   local access_options='noexec,nosuid,mode=0777,nr_inodes=4k'
   local size="$(tmpfs_directory_value $label size)"

   echo "$general_options,$access_options,size=$size"
}
export -f mount_tmpfs_options
