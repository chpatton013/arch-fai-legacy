#!/usr/bin/env bash

###############################################################################
# Command wrappers.
###############################################################################

_parted() {
   parted --script --align optimal -- "$@"
}

_mkpart() {
   local device="$1"
   local part="$2"
   local begin="$3"
   local end="$4"
   local name="$5"
   local flag="$6"

   [ "$device" ] && [ "$part" ] && [ "$begin" ] && [ "$end" ]

   _parted "$device" mkpart primary "$begin" "$end"
   [ "$name" ] && (_parted "$device" name "$part" "$name") || true
   [ "$flag" ] && (_parted "$device" set "$part" "$flag" on) || true
}

_lvcreate() {
   local name="$1"
   local size="$2"

   [ "$name" ] && [ "$size" ]

   lvcreate --zero y --wipesignatures y --name "$name" --size "$size" "$LV_GROUP"
}

_format() {
   local fs_type="$1"
   local device="$2"

   [ "$fs_type" ] && [ "$device" ]

   "mkfs.$fs_type" "$device"
}

_mount() {
   local fs_type="$1"
   local device="$2"
   local path="$3"
   local options="$4"

   [ "$fs_type" ] && [ "$device" ] && [ "$path" ] && [ "$options" ]

   mkdir -p "$path"
   mount -t "$fs_type" -o "$options" "$device" "$path"
}

format_and_mount() {
   local fs_type="$1"
   local device="$2"
   local path="$3"

   [ "$fs_type" ] && [ "$device" ] && [ "$path" ]

   local options="$(mount_options $path)"

   [ "$options" ]

   _format "$fs_type" "$device"
   _mount "$fs_type" "$device" "$path" "$options"
}

make_key() {
   local label="$1"

   [ "$label" ]

   local keyfile="$(mount_point root)$(crypt_key_file $label)"

   dd if=/dev/random of="$keyfile" bs=2K count=1 iflag=fullblock
   chmod 000 "$keyfile"

   echo "$keyfile"
}

encrypt_key() {
   local label="$1"
   local keyfile="$2"

   [ "$label" ] && [ "$keyfile" ]

   local device="$(logical_volume $label)"
   local cryptsetup="cryptsetup -q --key-file $keyfile"

   $cryptsetup luksFormat "$device"
   $cryptsetup luksOpen "$device" "$label"
}

encrypt_phrase() {
   local label="$1"
   local passphrase="$2"

   [ "$label" ] && [ "$passphrase" ]

   local device="$(logical_volume $label)"
   local cryptsetup='cryptsetup -q'

   echo "$passphrase" | $cryptsetup luksFormat "$device"
   echo "$passphrase" | $cryptsetup luksOpen "$device" "$label"
}

###############################################################################
# Disk preparation.
###############################################################################

make_raw_partitions() {
   _print 'Making raw partitions'

   _parted "$RAW_DEVICE_PATH" mklabel gpt

   local index='1'
   local begin='2'
   local end=

   for label in $(echo $RAW_PARTITIONS); do
      _print "   raw partition '$label'"

      local size="$(raw_partition_value $label size)"
      local name="$(raw_partition_value $label name)"
      local flag="$(raw_partition_value $label flag)"

      if [ "_$size" = '_-1' ]; then
         end='-1'
      else
         end="$(expr $begin + $size)"
      fi

      _mkpart "$RAW_DEVICE_PATH" "$index" "$begin" "$end" "$name" "$flag"

      index="$(expr $index + 1)"
      begin="$end"
   done
}

make_logical_volumes() {
   _print 'Making logical volumes'

   pvcreate -ff --yes "$(lvm_partition)"
   vgcreate "$LV_GROUP" "$(lvm_partition)"

   for label in $(echo $LOGICAL_VOLUMES); do
      _print "   logical volume '$label'"

      local name="$(logical_volume_value $label name)"
      local size="$(logical_volume_value $label size)"

      _lvcreate "$name" "$size"
   done
}

make_luks_containers() {
   _print 'Making luks containers'

   mkdir -p "$(mount_point root)$(crypt_key_dir)"
   chmod 000 "$(mount_point root)$(crypt_key_dir)"

   for label in $(echo $LUKS_CONTAINERS); do
      _print "   luks container '$label'"

      local name="$(logical_volume_value $label name)"

      local keyfile="$(make_key $label)"
      local fs_type="$(logical_volume_value $name fs_type)"
      local path="$(luks_container $name)"
      local mount="$(mount_point $name)"

      encrypt_key "$label" "$keyfile"
      format_and_mount "$fs_type" "$path" "$mount"
   done
}

mount_tmpfs_directories() {
   _print 'Mounting tmpfs directories'

   for label in $(echo $TMPFS_DIRECTORIES); do
      local mount="$(tmpfs_directory_value $label mount)"
      local options="$(mount_tmpfs_options $label)"

      _print "   tmpfs directory '$mount'"

      _mount tmpfs tmpfs "$mount" "$options"
   done
}

###############################################################################
# Instructions.
###############################################################################

make_raw_partitions
make_logical_volumes

# Root
encrypt_phrase root "$(cat $(config_file passphrase))"
fs_type="$(logical_volume_value root fs_type)"
device="$(luks_container root)"
mount="$(mount_point root)"
format_and_mount "$fs_type" "$device" "$mount"

# Boot
fs_type="$(raw_partition_value boot fs_type)"
device="$(boot_partition)"
mount="$(mount_point boot)"
format_and_mount "$fs_type" "$device" "$mount"

# Encrypted
make_luks_containers

# TMPFS
mount_tmpfs_directories
